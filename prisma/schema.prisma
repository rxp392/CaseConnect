generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model History {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  questionId Int
  caseId     String
  belongsTo  User     @relation(fields: [caseId], references: [caseId], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model User {
  caseId         String     @id
  name           String
  image          String?
  subscription   String     @default("Basic")
  canAnswer      Boolean    @default(true)
  browseLimit    Int        @default(10)
  postLimit      Int        @default(3)
  accountCreated DateTime   @default(now())
  questions      Question[]
  answers        Answer[]
  courses        Course[]
  comments       Comment[]
  viewHistory    History[]
}

model Question {
  id            Int       @id @default(autoincrement())
  question      String
  attachment    String?
  courseId      Int
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers       Answer[]
  postedBy      User      @relation(fields: [userCaseId], references: [caseId])
  userCaseId    String
  publisherName String
  createdAt     DateTime  @default(now())
  views         History[]
}

model Answer {
  id            Int       @id @default(autoincrement())
  answer        String
  questionId    Int
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedBy      User      @relation(fields: [userCaseId], references: [caseId])
  userCaseId    String
  publisherName String
  numThumbsUp   Int
  numThumbsDown Int
  createdAt     DateTime  @default(now())
  readOrNot     Boolean   @default(false)
  comments      Comment[]
}

model Comment {
  id            Int      @id @default(autoincrement())
  comment       String
  userCaseId    String
  publisherName String
  postedBy      User     @relation(fields: [userCaseId], references: [caseId])
  answerId      Int
  question      Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  readOrNot     Boolean  @default(false)
}

model Course {
  id         Int        @id @default(autoincrement())
  courseName String
  questions  Question[]
  users      User[]
}
