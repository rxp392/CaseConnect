generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  caseId         String         @id
  name           String
  profileImage   String?
  isFirstLogin   Boolean        @default(true)
  subscription   String         @default("Basic")
  accountCreated DateTime       @default(now())
  totalQuestions Int?           @default(0)
  questions      Question[]
  answers        Answer[]
  courses        Course[]
  viewHistory    History[]
  notifications  Notification[]
}

model History {
  id             Int      @id @default(autoincrement())
  viewedAt       DateTime @default(now())
  questionId     Int
  questionCaseId String
  caseId         String
  belongsTo      User     @relation(fields: [caseId], references: [caseId], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Course {
  id         Int        @id @default(autoincrement())
  courseName String
  questions  Question[]
  users      User[]
}

model Notification {
  id             Int      @id @default(autoincrement())
  question       String
  type           String
  notifierName   String
  notifierCaseId String
  userCaseId     String
  belongsTo      User     @relation(fields: [userCaseId], references: [caseId])
  answerId       Int
  answer         Answer   @relation(fields: [answerId], references: [id])
  createdAt      DateTime @default(now())
  questionId     Int
  courseId       Int
}

model Question {
  id            Int       @id @default(autoincrement())
  question      String
  attachment    String?
  courseId      Int
  courseName    String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  postedBy      User      @relation(fields: [userCaseId], references: [caseId])
  userCaseId    String
  publisherName String
  createdAt     DateTime  @default(now())
  answers       Answer[]
  views         History[]
}

model Answer {
  id            Int            @id @default(autoincrement())
  answer        String
  attachment    String?
  questionId    Int
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userCaseId    String
  postedBy      User           @relation(fields: [userCaseId], references: [caseId])
  publisherName String
  thumbsUp      ThumbUp[]
  thumbsDown    ThumbDown[]
  Notification  Notification[]
  createdAt     DateTime       @default(now())
}

model ThumbUp {
  id         Int    @id @default(autoincrement())
  answerId   Int
  answer     Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userCaseId String
}

model ThumbDown {
  id         Int    @id @default(autoincrement())
  answerId   Int
  answer     Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userCaseId String
}
