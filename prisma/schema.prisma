generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  caseID         String     @id
  subscription   String     @default("Basic")
  isFirstLogin   Boolean    @default(true)
  canAnswer      Boolean    @default(true)
  accountCreated DateTime   @default(now())
  questions      Question[]
  answers        Answer[]
  courses        Course[]
  comments       Comment[]
  votes          Vote[]
}

model Question {
  id                Int       @id @default(autoincrement())
  question          String
  attachment        String?
  courseId          Int
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers           Answer[]
  postedBy          User      @relation(fields: [userCaseID], references: [caseID])
  userCaseID        String
  publisherUserName String
  comments          Comment[]
  createdAt         DateTime  @default(now())
}


model Answer {
  id                Int      @id @default(autoincrement())
  answer            String
  votes             Vote[]
  questionId        Int
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedBy          User     @relation(fields: [userCaseID], references: [caseID])
  userCaseID        String
  publisherUserName String
  createdAt         DateTime @default(now())
}

model Comment {
  id                Int      @id @default(autoincrement())
  comment           String
  userCaseID        String
  publisherUserName String
  postedBy          User     @relation(fields: [userCaseID], references: [caseID])
  questionID        Int
  question          Question @relation(fields: [questionID], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
}

model Course {
  id         Int        @id @default(autoincrement())
  courseName String
  questions  Question[]
  users      User[]
}

model Vote {
  id                Int    @id @default(autoincrement())
  voteType          String
  userCaseID        String
  publisherUserName String
  user              User   @relation(fields: [userCaseID], references: [caseID])
  answerID          Int
  answer            Answer @relation(fields: [answerID], references: [id], onDelete: Cascade)
}
