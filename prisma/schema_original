datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User{
  case_id       String    @db.VarChar(50) @map(name: "case_id") @id
  name          String    @map(name: "name")
  payBill       billing   @relation(fields: [userBill_id], references: [billing_id])
  userBill_id   Int       @map(name: "billing_id")
  subscription  String?   @db.VarChar(20) @map(name: "subscription_status")
  tutor         tutor?
  expert_users  expert_users?
  workingTuts   work_with[]
  comments      comment[]
  posts         post[]
  tutor_evaluations feedback[]
}

model Tutor{
  tutor_id     Int       @map(name: "tutor_id") @id @default(autoincrement())
  subject      String    @db.VarChar(50) @map(name: "subject")
  gender       String    @db.VarChar(50) @map(name: "gender")
  profile      String    @db.Text @map(name: "profile")
  casetut      users     @relation(fields: [case_id], references: [case_id])
  case_id      String    @db.VarChar(50) @map(name: "case_id")
  workingStuds work_with[]
  feedbacks    feedback[]
}

model Expert_User{
  expert_id    Int       @map(name: "expert_id") @id @default(autoincrement())
  expUser      users     @relation(fields: [case_id], references: [case_id])
  case_id      String    @db.VarChar(50) @map(name: "case_id")
  invites      invited_to[]
}

model Work_With{
  tutor_id     Int       @map(name: "tutor_id")
  case_id      String    @db.VarChar(50)  @map(name: "case_id")
  workingStud  users     @relation(fields: [case_id], references: [case_id])
  workingTut   tutor     @relation(fields: [tutor_id], references: [tutor_id])
  messages     message[]

  @@id([tutor_id, case_id])
}

model Post{
  post_id      Int       @map(name: "post_id") @id @default(autoincrement())
  post_time    DateTime  @map(name: "post_time") @default(now())
  post_content String    @db.Text @map(name: "post_content")
  category     String    @db.VarChar(50) @map(name: "category")
  tag          String    @db.VarChar(50) @map(name: "tag")
  status       String    @db.VarChar(50) @map(name: "status")
  author       users     @relation(fields: [author_id], references: [case_id])
  author_id    String    @db.VarChar(50) @map(name: "case_id")
  comments     comment[]
  experts      invited_to[]
}

model Comment{
  comment_id        Int       @map(name: "comment_id") @default(autoincrement())
  comment_time      DateTime  @map(name: "comment_timestamp") @default(now())
  comment_content   String    @db.Text @map(name: "comment_content")
  author            users     @relation(fields: [author_id], references: [case_id])
  author_id         String    @db.VarChar(50) @map(name: "case_id")
  post_id           Int       @map(name: "post_id")
  belong_to         post      @relation(fields: [post_id], references: [post_id])
  num_thumbs_up     Int       @map(name: "num_thumbs_up")
  num_thumbs_down   Int       @map(name: "num_thumbs_down")
  next_id           Int?      @map(name: "post_comment_id")
  previous          comment?  @relation("follow_up")
  next              comment?  @relation("follow_up", fields: [next_id, post_id], references: [comment_id, post_id])

  @@id([comment_id, post_id])
}

model Message{
  message_id        Int       @map(name: "message_id") @default(autoincrement())
  case_id           String    @db.VarChar(50) @map(name: "case_id")
  tutor_id          Int       @map(name: "tutor_id")
  message_time      DateTime  @map(name: "message_timestamp") @default(now())
  message_content   String    @db.Text @map(name: "message_content")
  next_id           Int?      @map(name: "post_message_id")
  previous          message?  @relation("next_to")
  next              message?  @relation("next_to", fields: [next_id, case_id, tutor_id], references: [message_id, case_id, tutor_id])
  tutoring          work_with @relation(fields: [case_id, tutor_id], references: [case_id, tutor_id])

  @@id([message_id, case_id, tutor_id])
}

model Invited_To{
  expert_id    Int              @map(name: "expert_id")
  post_id      Int              @map(name: "post_id")
  experts      expert_users     @relation(fields: [expert_id], references: [expert_id])
  posts        post             @relation(fields: [post_id], references: [post_id])

  @@id([expert_id, post_id])
}

model Feedback{
  feedback_id       Int         @map(name: "feedback_id") @default(autoincrement())
  feedback_time     DateTime    @map(name: "feedback_timestamp") @default(now())
  feedback_content  String      @db.Text @map(name: "feedback_content")
  case_id           String      @db.VarChar(50) @map(name: "case_id")
  tutor_id          Int         @map(name: "tutor_id")
  num_useful        Int         @map(name: "num_useful")
  num_useless       Int         @map(name: "num_useless")
  author            users       @relation(fields: [case_id], references: [case_id])
  tutor             tutor       @relation(fields: [tutor_id], references: [tutor_id])

  @@id([feedback_id, tutor_id])
}
