generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model History {
  id         Int      @id @default(autoincrement())
  viewDate   DateTime @default(now())
  questionID Int
  caseID     String
  belongsTo  User     @relation(fields: [caseID], references: [caseID], onDelete: Cascade)
  question   Question @relation(fields: [questionID], references: [id], onDelete: Cascade)
}

model User {
  caseID         String     @id
  subscription   String     @default("Basic")
  isFirstLogin   Boolean    @default(true)
  canAnswer      Boolean    @default(true)
  // browseLimit    Int        @default(10)
  // postLimit      Int        @default(3)
  accountCreated DateTime   @default(now())
  questions      Question[]
  answers        Answer[]
  courses        Course[]
  comments       Comment[]
  votes          Vote[]
  viewHistory    History[]
}

model Question {
  id            Int       @id @default(autoincrement())
  question      String
  attachment    String?
  courseId      Int
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers       Answer[]
  postedBy      User      @relation(fields: [userCaseID], references: [caseID])
  userCaseID    String
  publisherName String
  createdAt     DateTime  @default(now())
  // views         History[]
}

model Answer {
  id            Int      @id @default(autoincrement())
  answer        String
  votes         Vote[]
  questionId    Int
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedBy      User     @relation(fields: [userCaseID], references: [caseID])
  userCaseID    String
  publisherName String
  numThumbsUp   Int
  numThumbsDown Int
  createdAt     DateTime @default(now())
  // readOrNot     Boolean   @default(false)
  // comments      Comment[]
}

model Comment {
  id            Int      @id @default(autoincrement())
  comment       String
  userCaseID    String
  publisherName String
  postedBy      User     @relation(fields: [userCaseID], references: [caseID])
  answerID      Int
  createdAt     DateTime @default(now())
  // question      Answer   @relation(fields: [answerID], references: [id], onDelete: Cascade)
  // nextID        Int?     @unique
  // previous      Comment? @relation("followUp")
  // next          Comment? @relation("followUp", fields: [nextID], references: [id])
  // readOrNot     Boolean  @default(false)
}

model Course {
  id        Int        @id @default(autoincrement())
  number    String
  title     String
  questions Question[]
  users     User[]
}

model Vote {
  id         Int    @id @default(autoincrement())
  voteType   String
  userCaseID String
  // publisherName String
  user       User   @relation(fields: [userCaseID], references: [caseID])
  answerID   Int
  answer     Answer @relation(fields: [answerID], references: [id], onDelete: Cascade)
}
